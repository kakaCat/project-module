<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="project.dal.inventory.time.repository.db.TimeInventoryMapper">

    <!-- 实体映射 -->
    <resultMap id="resultModel" type="project.dal.inventory.time.entity.TimeInventoryModel">
        <id column="id" property="id" jdbcType="BIGINT" />
        <result column="create_date" property="createDate"/>
        <result column="update_date" property="updateDate"/>
        <result column="scope" property="scope" jdbcType="INTEGER" />
        <result column="scope_id" property="scopeId" jdbcType="VARCHAR" />
        <result column="time_unit" property="timeUnit" jdbcType="INTEGER" />
        <result column="inventory_time" property="inventoryTime" />
        <result column="value0" property="value0" jdbcType="INTEGER" />
        <result column="value1" property="value1" jdbcType="INTEGER" />
        <result column="value2" property="value2" jdbcType="INTEGER" />
        <result column="value3" property="value3" jdbcType="INTEGER" />
        <result column="value4" property="value4" jdbcType="INTEGER" />
        <result column="value5" property="value5" jdbcType="INTEGER" />
    </resultMap>

    <sql id="Base_Column_List">
		id,scope,scope_id,time_unit,inventory_time,value0,value1,value2,value3,value4,value5,
		create_date,update_date
	</sql>




    <insert id="insertTimeInventory" useGeneratedKeys="true" keyProperty="id">
        INSERT INTO inventory_time (
            `create_date`, `update_date`, `scope`, `scope_id`, `time_unit`, `inventory_time`,
            `value0`, `value1`, `value2`, `value3`, `value4`, `value5`
        )
        VALUES
        (
            now(), now(), #{scope}, #{scopeId}, #{timeUnit}, #{inventoryTime},
            #{value0}, #{value1}, #{value2}, #{value3}, #{value4}, #{value5}
        )
    </insert>

    <insert id="insertTimeInventories" useGeneratedKeys="true" keyProperty="id" parameterType="List">
        INSERT INTO inventory_time (
        `create_date`, `update_date`, `scope`, `scope_id`, `time_unit`, `inventory_time`,
        `value0`, `value1`, `value2`, `value3`, `value4`, `value5`
        )
        VALUES
        <foreach collection="list" index="index" item="item" separator=",">
        (
            now(), now(), #{item.scope}, #{item.scopeId}, #{item.timeUnit}, #{item.inventoryTime},
            #{item.value0}, #{item.value1}, #{item.value2}, #{item.value3}, #{item.value4}, #{item.value5}
        )
        </foreach>
    </insert>

    <select id="testTimeInventoryByDates" resultType="java.lang.Long">
        SELECT `id` FROM inventory_time
        WHERE
            scope = #{scope}
        AND
            scope_id = #{scopeId}
        AND
            `date` >= #{startDate}
        AND
            `date` &lt; #{endDate}
        LIMIT 1
    </select>

<!--    <select id="getTimeInventoryById" resultMap="resultModel" parameterType="java.lang.Long">-->
<!--        SELECT * FROM-->
<!--        inventory_time-->
<!--        WHERE id = #{id};-->
<!--    </select>-->

<!--    <select id="getTimeInventoriesByDates" resultMap="resultModel">-->
<!--        SELECT * FROM-->
<!--        inventory_time-->
<!--        WHERE-->
<!--            scope = #{scope}-->
<!--        AND-->
<!--            scope_id = #{scopeId}-->
<!--        AND-->
<!--            `date` >= #{startDate}-->
<!--        AND-->
<!--            `date` &lt; #{endDate}-->
<!--        ORDER BY `date`;-->
<!--    </select>-->

<!--    <select id="batchGetTimeInventoriesByDates" resultMap="resultModel">-->
<!--        SELECT * FROM-->
<!--        inventory_time-->
<!--        <where>-->
<!--            scope = #{scope}-->
<!--            <if test="scopeIds != null">-->
<!--                AND scope_id IN-->
<!--                <foreach collection="scopeIds" index="index" item="item" separator="," open="(" close=")">-->
<!--                    #{item}-->
<!--                </foreach>-->
<!--            </if>-->
<!--            <if test="startDate != null">-->
<!--                AND `date` >= #{startDate}-->
<!--            </if>-->
<!--            <if test="endDate != null">-->
<!--                AND `date` &lt; #{endDate}-->
<!--            </if>-->
<!--        </where>-->
<!--        ORDER BY scope, scope_id-->
<!--    </select>-->

    <select id="getTimeInventoriesBySeparateDates" resultMap="resultModel">
        SELECT <include refid="Base_Column_List" /> FROM
        inventory_time
        <where>
            <if test="scope != null">
                scope = #{scope}
            </if>
            <if test="scopeId != null">
                AND scope_id = #{scopeId}
            </if>
            <if test="dates != null">
                AND `inventory_time` IN (
                <foreach collection="dates" item="item" index="index" separator=",">
                    #{item}
                </foreach>
                )
            </if>
        </where>
        ORDER BY `inventory_time`
    </select>

    <update id="updateTimeInventory">
        UPDATE inventory_time
        <set>
            update_date = now(),
            <foreach collection="changedValues" index="index" item="item" separator=",">
                <choose>
                    <when test='index == "value0"'>
                        `value0` = #{value0}
                    </when>
                    <when test='index == "value1"'>
                        `value1` = #{value1}
                    </when>
                    <when test='index == "value2"'>
                        `value2` = #{value2}
                    </when>
                    <when test='index == "value3"'>
                        `value3` = #{value3}
                    </when>
                    <when test='index == "value4"'>
                        `value4` = #{value4}
                    </when>
                    <otherwise>
                        `value5` = #{value5}
                    </otherwise>
                </choose>
            </foreach>
        </set>
        WHERE
            id = #{id}
        AND
            <foreach collection="changedValues" index="index" item="item" separator=" AND ">
                <choose>
                    <when test='index == "value0"'>
                        `value0` = #{item}
                    </when>
                    <when test='index == "value1"'>
                        `value1` = #{item}
                    </when>
                    <when test='index == "value2"'>
                        `value2` = #{item}
                    </when>
                    <when test='index == "value3"'>
                        `value3` = #{item}
                    </when>
                    <when test='index == "value4"'>
                        `value4` = #{item}
                    </when>
                    <otherwise>
                        `value5` = #{item}
                    </otherwise>
                </choose>
            </foreach>
    </update>

<!--    <delete id="deleteTimeInventory">-->
<!--        DELETE FROM inventory_time WHERE id = #{id}-->
<!--    </delete>-->

</mapper>
